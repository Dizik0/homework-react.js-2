{"version":3,"sources":["Components/Statistic/Statistic.js","Components/FeadbackOption/FeadbackOption.js","Components/Notification/Notification.js","Components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Statistic","this","props","Good","Neutral","Bad","total","countPositiveFeedbackPercentage","Component","propTypos","PropTypes","number","isRequired","func","FeadbackOption","onClick","options","Notification","message","Section","state","countTotalFeedback","Math","trunc","eventCather","preview","setState","render","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qRAEaA,EAAb,4JACE,WACE,MACEC,KAAKC,MADCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,gCAEnC,OACE,gCACE,4CACA,+BACE,uCACO,+BAAOJ,OAEd,yCACS,+BAAOC,OAEhB,qCACK,+BAAOC,OAEZ,uCAEE,+BAAOC,OAET,mDAEE,iCAAOC,EAAP,oBAvBZ,GAA+BC,aA+B/BR,EAAUS,UAAY,CACpBN,KAAMO,YAAUC,OAAOC,WACvBR,QAASM,YAAUC,OAAOC,WAC1BP,IAAKK,YAAUC,OAAOC,WACtBL,gCAAiCG,YAAUG,KAAKD,WAChDN,MAAOI,YAAUG,KAAKD,YCrCjB,IAAME,EAAb,4JACE,WACE,OACE,qCACE,wBAAQC,QAASd,KAAKC,MAAMc,QAAQ,QAApC,kBACA,wBAAQD,QAASd,KAAKC,MAAMc,QAAQ,WAApC,qBACA,wBAAQD,QAASd,KAAKC,MAAMc,QAAQ,OAApC,wBANR,GAAoCR,aCGrBS,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCIAC,EAAb,4MACEC,MAAQ,CACNjB,KAAM,EACNC,QAAS,EACTC,IAAK,GAJT,EAMEgB,mBAAqB,kBACnB,EAAKD,MAAMjB,KAAO,EAAKiB,MAAMhB,QAAU,EAAKgB,MAAMf,KAPtD,EAQEE,gCAAkC,kBAChCe,KAAKC,MAAyB,IAAlB,EAAKH,MAAMjB,KAAc,EAAKkB,uBAT9C,EAWEG,YAAc,SAACC,GAAD,OAAa,WACzB,EAAKC,SAAL,eAAiBD,EAAU,EAAKL,MAAMK,GAAW,MAZrD,4CAeE,WACE,IAAIE,EAcJ,OAZEA,EADgC,IAA9B1B,KAAKoB,qBAEL,cAAC,EAAD,CACElB,KAAMF,KAAKmB,MAAMjB,KACjBC,QAASH,KAAKmB,MAAMhB,QACpBC,IAAKJ,KAAKmB,MAAMf,IAChBC,MAAOL,KAAKoB,qBACZd,gCAAiCN,KAAKM,oCAIjC,cAAC,EAAD,CAAcW,QAAS,sBAGhC,qCACE,uDACA,cAAC,EAAD,CAAgBF,QAASf,KAAKuB,cAC7BG,SAlCT,GAA6BnB,aCKdoB,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASX,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.72193ba4.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\nexport class Statistic extends Component {\r\n  render() {\r\n    const { Good, Neutral, Bad, total, countPositiveFeedbackPercentage } =\r\n      this.props;\r\n    return (\r\n      <div>\r\n        <h2>Statistics</h2>\r\n        <ul>\r\n          <li>\r\n            Good <span>{Good}</span>\r\n          </li>\r\n          <li>\r\n            Neutral<span>{Neutral}</span>\r\n          </li>\r\n          <li>\r\n            Bad<span>{Bad}</span>\r\n          </li>\r\n          <li>\r\n            total\r\n            <span>{total}</span>\r\n          </li>\r\n          <li>\r\n            Positive feedback\r\n            <span>{countPositiveFeedbackPercentage}%</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nStatistic.propTypos = {\r\n  Good: PropTypes.number.isRequired,\r\n  Neutral: PropTypes.number.isRequired,\r\n  Bad: PropTypes.number.isRequired,\r\n  countPositiveFeedbackPercentage: PropTypes.func.isRequired,\r\n  total: PropTypes.func.isRequired,\r\n};\r\n","import { Component } from \"react\";\r\nexport class FeadbackOption extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <button onClick={this.props.options(\"Good\")}>Good</button>\r\n        <button onClick={this.props.options(\"Neutral\")}>Neutral</button>\r\n        <button onClick={this.props.options(\"Bad\")}>Bad</button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","const Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nexport default Notification;\r\n","import { Component } from \"react\";\r\n\r\nimport { Statistic } from \"../Statistic/Statistic\";\r\nimport { FeadbackOption } from \"../FeadbackOption/FeadbackOption\";\r\nimport Notification from \"../Notification/Notification\";\r\nexport class Section extends Component {\r\n  state = {\r\n    Good: 0,\r\n    Neutral: 0,\r\n    Bad: 0,\r\n  };\r\n  countTotalFeedback = () =>\r\n    this.state.Good + this.state.Neutral + this.state.Bad;\r\n  countPositiveFeedbackPercentage = () =>\r\n    Math.trunc((this.state.Good * 100) / this.countTotalFeedback());\r\n\r\n  eventCather = (preview) => () => {\r\n    this.setState({ [preview]: this.state[preview] + 1 });\r\n  };\r\n\r\n  render() {\r\n    let render;\r\n    if (this.countTotalFeedback() !== 0) {\r\n      render = (\r\n        <Statistic\r\n          Good={this.state.Good}\r\n          Neutral={this.state.Neutral}\r\n          Bad={this.state.Bad}\r\n          total={this.countTotalFeedback()}\r\n          countPositiveFeedbackPercentage={this.countPositiveFeedbackPercentage()}\r\n        />\r\n      );\r\n    } else {\r\n      render = <Notification message={\"No feedback given\"}></Notification>;\r\n    }\r\n    return (\r\n      <>\r\n        <h1>Please leave feadback</h1>\r\n        <FeadbackOption options={this.eventCather} />\r\n        {render}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport { Section } from \"./Components/Section/Section\";\nfunction App() {\n  return (\n    <div>\n      <Section />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}